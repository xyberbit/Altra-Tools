diff --git a/Platform/Ampere/JadePkg/Drivers/AcpiPlatformDxe/AcpiDsdt.c b/Platform/Ampere/JadePkg/Drivers/AcpiPlatformDxe/AcpiDsdt.c
index 35cbff7cf3..bed9d12ef7 100644
--- a/Platform/Ampere/JadePkg/Drivers/AcpiPlatformDxe/AcpiDsdt.c
+++ b/Platform/Ampere/JadePkg/Drivers/AcpiPlatformDxe/AcpiDsdt.c
@@ -521,7 +521,7 @@ AcpiPatchPcieMmio32 (
       continue;
     }
 
-    if (!IsSlaveSocketAvailable () && Idx <= SOCKET0_LAST_RC) {
+    if (!IsSlaveSocketAvailable () && Idx <= SOCKET0_LAST_RC && Idx >= SOCKET0_FIRST_RC) {
       //
       // Patch MMIO32 resource in 1P system
       //
diff --git a/Silicon/Ampere/AmpereAltraPkg/Drivers/PcieInitPei/PcieInitPei.c b/Silicon/Ampere/AmpereAltraPkg/Drivers/PcieInitPei/PcieInitPei.c
index f86710189e..129d22c1c9 100644
--- a/Silicon/Ampere/AmpereAltraPkg/Drivers/PcieInitPei/PcieInitPei.c
+++ b/Silicon/Ampere/AmpereAltraPkg/Drivers/PcieInitPei/PcieInitPei.c
@@ -95,7 +95,7 @@ BuildRootComplexData (
     RootComplex = &mRootComplexList[RCIndex];
     RootComplex->Active = ConfigFound ? RootComplexConfig.RCStatus[RCIndex] : TRUE;
     RootComplex->DevMapLow = ConfigFound ? RootComplexConfig.RCBifurcationLow[RCIndex] : 0;
-    RootComplex->DevMapHigh = ConfigFound ? RootComplexConfig.RCBifurcationLow[RCIndex] : 0;
+    RootComplex->DevMapHigh = ConfigFound ? RootComplexConfig.RCBifurcationHigh[RCIndex] : 0;
     RootComplex->Socket = RCIndex / AC01_PCIE_MAX_RCS_PER_SOCKET;
     RootComplex->ID = RCIndex % AC01_PCIE_MAX_RCS_PER_SOCKET;
     RootComplex->CsrBase = mCsrBase[RCIndex];
diff --git a/Silicon/Ampere/AmpereAltraPkg/Drivers/RootComplexConfigDxe/RootComplexConfigDxe.c b/Silicon/Ampere/AmpereAltraPkg/Drivers/RootComplexConfigDxe/RootComplexConfigDxe.c
index e03be2a2f9..396fd48ade 100644
--- a/Silicon/Ampere/AmpereAltraPkg/Drivers/RootComplexConfigDxe/RootComplexConfigDxe.c
+++ b/Silicon/Ampere/AmpereAltraPkg/Drivers/RootComplexConfigDxe/RootComplexConfigDxe.c
@@ -724,7 +724,7 @@ PcieRCScreenSetup (
     OptionsOpCodeHandle = CreateDevMapOptions (RootComplex);
 
     if (RootComplex->DefaultDevMapLow != 0) {
-      QuestionFlags |= EFI_IFR_FLAG_READ_ONLY;
+//    QuestionFlags |= EFI_IFR_FLAG_READ_ONLY;
     }
 
     HiiCreateOneOfOpCode (
diff --git a/Silicon/Ampere/AmpereAltraPkg/Library/Ac01PcieLib/PcieCore.c b/Silicon/Ampere/AmpereAltraPkg/Library/Ac01PcieLib/PcieCore.c
index 1553bbf056..d1a5b3e4de 100644
--- a/Silicon/Ampere/AmpereAltraPkg/Library/Ac01PcieLib/PcieCore.c
+++ b/Silicon/Ampere/AmpereAltraPkg/Library/Ac01PcieLib/PcieCore.c
@@ -677,6 +677,12 @@ Ac01PcieCoreSetupRC (
     // Hold link training
     StartLinkTraining (RootComplex, PcieIndex, FALSE);
 
+    // Enable Unsupported Request (UR unmasked)
+    TargetAddress = CsrBase + AC01_PCIE_CORE_BUS_CTRL_REG;
+    Val = MmioRead32 (TargetAddress);
+    Val &= ~BUSCTL_CFG_UR_MASK;
+    MmioWrite32 (TargetAddress, Val);
+
     if (!EnableAxiPipeClock (RootComplex, PcieIndex)) {
       DEBUG ((DEBUG_ERROR, "- Pcie[%d] - PIPE clock is not stable\n", PcieIndex));
       return RETURN_DEVICE_ERROR;
@@ -1077,7 +1083,7 @@ Ac01PFACommand (
   return Ret;
 }
 
-UINT32
+BOOLEAN
 EndpointCfgReady (
   IN AC01_ROOT_COMPLEX  *RootComplex,
   IN UINT8              PcieIndex
diff --git a/Silicon/Ampere/AmpereAltraPkg/Library/Ac01PcieLib/PcieCore.h b/Silicon/Ampere/AmpereAltraPkg/Library/Ac01PcieLib/PcieCore.h
index 1db8a68b3d..6600fd6e7f 100644
--- a/Silicon/Ampere/AmpereAltraPkg/Library/Ac01PcieLib/PcieCore.h
+++ b/Silicon/Ampere/AmpereAltraPkg/Library/Ac01PcieLib/PcieCore.h
@@ -80,6 +80,7 @@
 #define AC01_PCIE_CORE_IRQ_ENABLE_REG           0x30
 #define AC01_PCIE_CORE_IRQ_EVENT_STAT_REG       0x38
 #define AC01_PCIE_CORE_BLOCK_EVENT_STAT_REG     0x3C
+#define AC01_PCIE_CORE_BUS_CTRL_REG             0x40
 #define AC01_PCIE_CORE_RESET_REG                0xC000
 #define AC01_PCIE_CORE_CLOCK_REG                0xC004
 #define AC01_PCIE_CORE_MEM_READY_REG            0xC104
@@ -120,6 +121,9 @@
 // AC01_PCIE_CORE_BLOCK_EVENT_STAT_REG
 #define LINKUP_MASK              0x1
 
+// AC01_PCIE_CORE_BUS_CTRL_REG
+#define BUSCTL_CFG_UR_MASK       0x8
+
 // AC01_PCIE_CORE_RESET_REG
 #define DWC_PCIE_SET(dst, src)   (((dst) & ~0x1) | (((UINT32) (src)) & 0x1))
 #define   RESET_MASK             0x1
diff --git a/Silicon/Ampere/AmpereAltraPkg/Library/PciSegmentLibPci/PciSegmentLib.c b/Silicon/Ampere/AmpereAltraPkg/Library/PciSegmentLibPci/PciSegmentLib.c
index 898558db8d..1eab1b56d2 100644
--- a/Silicon/Ampere/AmpereAltraPkg/Library/PciSegmentLibPci/PciSegmentLib.c
+++ b/Silicon/Ampere/AmpereAltraPkg/Library/PciSegmentLibPci/PciSegmentLib.c
@@ -54,6 +54,31 @@
 **/
 #define PCI_SEGMENT_TO_PCI_ADDRESS(A) ((UINTN)(UINT32)A)
 
+/**
+  Validate a node from config address.
+**/
+STATIC UINT8 PciNodeCheck (UINT64 CfgBase)
+{
+  UINT8 Bus = GET_BUS_NUM (CfgBase);
+
+  CfgBase &= 0xFFFFF0000000; // BDF 00:00.0 RC host base
+
+  for (int i = 1; i <= 8; i++) { // max 8 RC ports per segment
+
+    CfgBase += (1ULL << 15); // BDF 00:i.0 RC port base
+    if (MmioRead32 (CfgBase) == 0xFFFFFFFF) continue; // invalid vid/did
+
+    UINT8 SecBus = MmioRead32 (CfgBase + 0x18) >> 8;
+    if (SecBus == Bus) { // child of RC
+      DEBUG((DEBUG_INFO, "  Node CK: Invalid\n"));
+      return 1;
+    }
+  }
+
+  DEBUG((DEBUG_INFO, "  Node CK: Valid\n"));
+  return 0;
+}
+
 /**
   Get the MCFG Base address from the segment number.
 **/
@@ -540,6 +565,7 @@ PciSegmentRead16 (
       if (HeaderType != 0) {
         PrimaryBus = MmioRead32 (CfgBase + PRIMARY_BUS_NUMBER_REG);
         DEBUG ((DEBUG_INFO, "  Peek RD: PrimaryBus=0x%02X\n", PrimaryBus));
+        if (PrimaryBus) PrimaryBus = PciNodeCheck (CfgBase);
       }
 
       if ((HeaderType == 0) || (PrimaryBus != 0)) {
@@ -973,6 +999,7 @@ PciSegmentRead32 (
       if (HeaderType != 0) {
         PrimaryBus = MmioRead32 (CfgBase + PRIMARY_BUS_NUMBER_REG);
         DEBUG ((DEBUG_INFO, "  Peek RD: PrimaryBus=0x%02X\n", PrimaryBus));
+        if (PrimaryBus) PrimaryBus = PciNodeCheck (CfgBase);
       }
 
       if ((HeaderType == 0) || (PrimaryBus != 0)) {
